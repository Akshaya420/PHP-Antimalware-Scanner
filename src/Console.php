<?php

/**
 * PHP Antimalware Scanner.
 *
 * @author Marco Cesarato <cesarato.developer@gmail.com>
 * @copyright Copyright (c) 2020
 * @license http://opensource.org/licenses/gpl-3.0.html GNU Public License
 *
 * @see https://github.com/marcocesarato/PHP-Antimalware-Scanner
 */

namespace marcocesarato\amwscan;

/**
 * Class Console
 * Console manager.
 */
class Console
{
    /**
     * Font colors.
     *
     * @var array
     */
    public static $foreground_colors = array(
        'black' => '0;30',
        'dark_gray' => '1;30',
        'blue' => '0;34',
        'light_blue' => '1;34',
        'green' => '0;32',
        'light_green' => '1;32',
        'cyan' => '0;36',
        'light_cyan' => '1;36',
        'red' => '0;31',
        'light_red' => '1;31',
        'purple' => '0;35',
        'light_purple' => '1;35',
        'brown' => '0;33',
        'yellow' => '1;33',
        'light_gray' => '0;37',
        'white' => '1;37',
    );

    /**
     * Background colors.
     *
     * @var array
     */
    public static $background_colors = array(
        'black' => '40',
        'red' => '41',
        'green' => '42',
        'yellow' => '43',
        'blue' => '44',
        'magenta' => '45',
        'cyan' => '46',
        'light_gray' => '47',
    );

    /**
     * Get new line char.
     *
     * @param $n
     *
     * @return string
     */
    public static function eol($n)
    {
        $eol = '';
        for ($i = 0; $i < $n; $i++) {
            $eol .= PHP_EOL;
        }

        return $eol;
    }

    /**
     * Print header.
     */
    public static function header()
    {
        $version = Scanner::getVersion();
        self::newLine(2);
        $header = <<<EOD
 █████╗ ███╗   ███╗██╗    ██╗███████╗ ██████╗ █████╗ ███╗   ██╗
██╔══██╗████╗ ████║██║    ██║██╔════╝██╔════╝██╔══██╗████╗  ██║
███████║██╔████╔██║██║ █╗ ██║███████╗██║     ███████║██╔██╗ ██║
██╔══██║██║╚██╔╝██║██║███╗██║╚════██║██║     ██╔══██║██║╚██╗██║
██║  ██║██║ ╚═╝ ██║╚███╔███╔╝███████║╚██████╗██║  ██║██║ ╚████║
╚═╝  ╚═╝╚═╝     ╚═╝ ╚══╝╚══╝ ╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═══╝
Github: https://github.com/marcocesarato/PHP-Antimalware-Scanner
EOD;
        self::displayLine($header, 2, 'green');
        $title = self::title('version ' . $version);
        self::display($title, 'green');
        self::newLine(2);

        $title = self::title('');
        self::display($title, 'black', 'green');
        self::newLine();

        $title = self::title('PHP Antimalware Scanner ' . $version);
        self::display($title, 'black', 'green');
        self::newLine();

        $title = self::title('Created by Marco Cesarato');
        self::display($title, 'black', 'green');
        self::newLine();

        $title = self::title('');
        self::display($title, 'black', 'green');
        self::newLine(2);
    }

    /**
     * Print title.
     *
     * @param $text
     * @param string $char
     * @param int $length
     *
     * @return string
     */
    public static function title($text, $char = ' ', $length = 64)
    {
        $result = '';
        $str_length = strlen($text);
        $spaces = $length - $str_length;
        $spaces_len_half = $spaces / 2;
        $spaces_len_left = round($spaces_len_half);
        $spaces_len_right = round($spaces_len_half);

        if ((round($spaces_len_half) - $spaces_len_half) >= 0.5) {
            $spaces_len_left--;
        }

        for ($i = 0; $i < $spaces_len_left; $i++) {
            $result .= $char;
        }

        $result .= $text;

        for ($i = 0; $i < $spaces_len_right; $i++) {
            $result .= $char;
        }

        return $result;
    }

    /**
     * Print progress.
     *
     * @param $done
     * @param $total
     * @param int $size
     */
    public static function progress($done, $total, $size = 30)
    {
        static $start_time;
        if ($done > $total) {
            return;
        }
        if (empty($start_time)) {
            $start_time = time();
        }
        $now = time();
        $perc = (float)($done / $total);
        $bar = floor($perc * $size);
        $status_bar = "\r[";
        $status_bar .= str_repeat('=', $bar);
        if ($bar < $size) {
            $status_bar .= '>';
            $status_bar .= str_repeat(' ', $size - $bar);
        } else {
            $status_bar .= '=';
        }
        $disp = number_format($perc * 100, 0);
        $status_bar .= "] $disp%";
        $rate = $done ? ($now - $start_time) / $done : ($now - $start_time);
        $left = $total - $done;

        $eta = round($rate * $left, 2);
        $eta_type = 'sec';
        $elapsed = $now - $start_time;
        $elapsed_type = 'sec';

        if ($eta > 59) {
            $eta_type = 'min';
            $eta = round($eta / 60);
        }

        if ($elapsed > 59) {
            $elapsed_type = 'min';
            $elapsed = round($elapsed / 60);
        }

        self::display("$status_bar ", 'black', 'green');
        self::display(' ');
        self::display("$done/$total", 'green');
        self::display(' [' . number_format($elapsed) . ' ' . $elapsed_type . '/' . number_format($eta) . ' ' . $eta_type . ']');
        @ob_flush();
        @flush();
        if ($done == $total) {
            self::newLine();
        }
    }

    /**
     * Display title bar.
     *
     * @param $string
     * @param $foreground_color
     * @param $background_color
     */
    public static function displayTitle($string, $foreground_color, $background_color)
    {
        $title = self::title('');
        self::display($title, $foreground_color, $background_color);
        self::newLine();

        $title = self::title(strtoupper($string));
        self::display($title, $foreground_color, $background_color);
        self::newLine();

        $title = self::title('');
        self::display($title, $foreground_color, $background_color);
        self::newLine();
    }

    /**
     * Print break without writing logs.
     *
     * @param int $eol
     */
    public static function newLine($eol = 1)
    {
        self::write(self::eol($eol), 'white', null, false, true);
    }

    /**
     * Print message without writing logs.
     *
     * @param $string
     * @param int $eol
     * @param string $foreground_color
     * @param null $background_color
     * @param bool $escape
     */
    public static function displayLine($string, $eol = 1, $foreground_color = 'white', $background_color = null, $escape = true)
    {
        self::write($string . self::eol($eol), $foreground_color, $background_color, false, $escape);
    }

    /**
     * Choice.
     *
     * @param $question
     * @param $options
     *
     * @return string
     */
    public static function choice($question, $options)
    {
        foreach ($options as $key => $value) {
            self::displayOption($key, $value);
        }
        self::newLine(2);

        return self::read(trim($question) . ' ', 'purple');
    }

    /**
     * Print option.
     *
     * @param $num
     * @param $string
     * @param string $foreground_color
     * @param null $background_color
     * @param bool $escape
     */
    public static function displayOption($num, $string, $foreground_color = 'white', $background_color = null, $escape = true)
    {
        self::write('    [' . $num . '] ' . $string . self::eol(1), $foreground_color, $background_color, false, $escape);
    }

    /**
     * Print message without writing logs.
     *
     * @param $string
     * @param string $foreground_color
     * @param null $background_color
     */
    public static function display($string, $foreground_color = 'white', $background_color = null, $escape = true)
    {
        self::write($string, $foreground_color, $background_color, false, $escape);
    }

    /**
     * Print break.
     *
     * @param int $eol
     */
    public static function writeBreak($eol = 1)
    {
        self::write(self::eol($eol));
    }

    /**
     * Print message and print eol.
     *
     * @param string $string
     * @param int $eol
     * @param string $foreground_color
     * @param null $background_color
     * @param null $log
     * @param bool $escape
     */
    public static function writeLine($string, $eol = 1, $foreground_color = 'white', $background_color = null, $log = null, $escape = true)
    {
        self::write($string . self::eol($eol), $foreground_color, $background_color, $log, $escape);
    }

    /**
     * Print message.
     *
     * @param $string
     * @param string $foreground_color
     * @param null $background_color
     * @param null $log
     */
    public static function write($string, $foreground_color = 'white', $background_color = null, $log = null, $escape = true)
    {
        $return_string = $string;
        if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {
            $foreground_color = null;
            $background_color = null;
        }
        if (Scanner::isLogsEnabled() && $log === null) {
            $log = true;
        }
        if ($escape) {
            $return_string = self::escape($return_string);
        }
        $colored_string = '';
        if (isset(self::$foreground_colors[$foreground_color])) {
            $colored_string .= "\033[" . self::$foreground_colors[$foreground_color] . 'm';
        }
        if (isset(self::$background_colors[$background_color])) {
            $colored_string .= "\033[" . self::$background_colors[$background_color] . 'm';
        }
        $colored_string .= $return_string . "\033[0m";

        if (!Scanner::isSilentMode()) {
            if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {
                echo $return_string;
            } else {
                echo $colored_string;
            }
        }

        if ($log) {
            self::log($string, (!empty($foreground_color) && $foreground_color !== 'white' ? $foreground_color : $background_color));
        }
    }

    /**
     * Read input.
     *
     * @param $string
     * @param string $foreground_color
     * @param null $background_color
     *
     * @return string
     */
    public static function read($string, $foreground_color = 'white', $background_color = null)
    {
        if (stripos(PHP_OS, 'WIN') === 0) {
            $foreground_color = null;
            $background_color = null;
        }
        $colored_string = '';
        if (isset(self::$foreground_colors[$foreground_color])) {
            $colored_string .= "\033[" . self::$foreground_colors[$foreground_color] . 'm';
        }
        if (isset(self::$background_colors[$background_color])) {
            $colored_string .= "\033[" . self::$background_colors[$background_color] . 'm';
        }
        $colored_string .= $string . "\033[0m";

        $read = null;

        if (!Scanner::isSilentMode()) {
            if (stripos(PHP_OS, 'WIN') === 0) {
                echo Scanner::getName() . ' > ' . trim($string) . ' ';
            } else {
                echo Scanner::getName() . ' > ' . trim($colored_string) . ' ';
            }
        }

        if (stripos(PHP_OS, 'WIN') === 0) {
            $read = stream_get_line(STDIN, 1024, PHP_EOL);
        } else {
            $in = array(STDIN);
            $out = array();
            $oob = array();
            while (@stream_select($in, $out, $oob, 0)) {
                fgets(STDIN);
            }
            $read = rtrim(fgets(STDIN));
        }

        return (string)$read;
    }

    /**
     * Print code.
     *
     * @param $string
     * @param array $errors
     * @param bool $log
     */
    public static function code($string, $errors = array(), $log = false)
    {
        $code = $string;
        if (count($errors) > 0) {
            foreach ($errors as $pattern) {
                $escaped = self::escape($pattern['match']);
                $code = str_replace($pattern['match'], "\033[" . self::$foreground_colors['red'] . 'm' . $escaped . "\033[" . self::$foreground_colors['white'] . 'm', $code);
            }
        }
        $lines = explode("\n", $code);
        foreach ($lines as $i => $iValue) {
            if ($i !== 0) {
                self::newLine();
            }
            self::display('  ' . str_pad((string)($i + 1), strlen((string)count($lines)), ' ', STR_PAD_LEFT) . ' | ', 'yellow');
            self::display($iValue, 'white', null, false);
        }
        if ($log) {
            self::log($string);
        }
    }

    /**
     * Write logs.
     *
     * @param $string
     * @param string $color
     */
    public static function log($string, $color = '')
    {
        $string = trim($string);
        if (!empty($string)) {
            $string = trim($string, '.');
            $string = str_replace(self::eol(1), ' ', $string);
            $string = preg_replace("/[\s]+/m", ' ', $string);
            $type = 'INFO';
            switch ($color) {
                case 'green':
                    $type = 'SUCCESS';
                    break;
                case 'yellow':
                    $type = 'WARNING';
                    break;
                case 'red':
                    $type = 'DANGER';
                    break;
            }
            $string = '[' . date('Y-m-d H:i:s') . '] [' . $type . '] ' . $string . PHP_EOL;
            file_put_contents(Scanner::getPathLogs(), $string, FILE_APPEND);
        }
    }

    /**
     * Escape colors string.
     *
     * @param $string
     *
     * @return string
     */
    public static function escape($string)
    {
        return mb_convert_encoding(preg_replace('/(e|\x1B|[[:cntrl:]]|\033)\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGKc]/', '', $string), 'utf-8', 'auto');
    }

    /**
     * Print lists.
     *
     * @param null $type
     */
    public static function helplist($type = null)
    {
        $list = '';
        if (empty($type) || $type === 'exploits') {
            $exploit_list = implode(self::eol(1) . '- ', array_keys(Definitions::$EXPLOITS));
            $list .= self::eol(1) . 'Exploits:' . self::eol(1) . "- $exploit_list";
        }
        if (empty($type)) {
            $list .= self::eol(1);
        }
        if (empty($type) || $type === 'functions') {
            $functions_list = implode(self::eol(1) . '- ', Definitions::$FUNCTIONS);
            $list .= self::eol(1) . 'Functions:' . self::eol(1) . "- $functions_list";
        }
        self::displayTitle(trim($type . ' List'), 'black', 'cyan');
        self::displayLine($list, 2);
    }

    /**
     * Print Helper.
     */
    public static function helper()
    {
        self::displayTitle('Help', 'black', 'cyan');
        $dir = Scanner::currentDirectory();
        $help = <<<EOD

IMPORTANT: You will be solely responsible for any damage to your computer system or loss of data
that results from such activities. You are solely responsible for adequate protection and backup 
of the data before execute the scanner.

Arguments:
<path>                       - Define the path to scan (default: current directory)
                               ($dir)

Flags:
-a   --agile                 - Help to have less false positive on WordPress and others platforms
                               enabling exploits mode and removing some common exploit pattern
-f   --only-functions        - Check only functions and not the exploits
-e   --only-exploits         - Check only exploits and not the functions,
                               this is recommended for WordPress or others platforms
-s   --only-signatures       - Check only virus signatures (like exploit but more specific)
-h   --help                  - Show the available flags and arguments
-l   --log=""                - Write a log file on 'index.php.log' or the specified filepath
-r   --report                - Report scan only mode without check and remove malware (like --auto-skip).
                               It also write a report with all malware paths found
-b   --backup                - Make a backup of every touched files
-u   --update                - Update index.php to last version
-v   --version               - Get version number

--limit=""                   - Set file mapping limit
--offset=""                  - Set file mapping offset

--max-filesize=""            - Set max filesize to scan (default: -1)
--ignore-path/s=""           - Ignore path/s, for multiple value separate with comma
                               Wildcards are enabled ex. /path/*/cache or /path/*.log
--filter-path/s=""           - Filter path/s, for multiple value separate with comma
                               Wildcards are enabled ex. /path/*/htdocs or /path/*.php
                          
--path-backups=""            - Set backups path directory (default ./scanner-backups)
                               Is recommended put files outside the public document path
--path-logs=""               - Set quarantine log file (default ./scanner.log)
--path-quarantine=""         - Set quarantine path directory (default ./scanner-quarantine)
                               Is recommended put files outside the public document path
--path-report=""             - Set report log file (default ./scanner-report.log)
--path-whitelist=""          - Set whitelist file (default ./scanner-whitelist.json)
                               
--exploits=""                - Filter exploits
--functions=""               - Define functions to search
--whitelist-only-path        - Check on whitelist only file path and not line number

--list                       - Get default exploit and functions list
--list-exploits              - Get default exploits list
--list-functions             - Get default functions lists

--silent                     - No output and prompt

--auto-clean                 - Auto clean code (without confirmation, use with caution)
--auto-clean-line            - Auto clean line code (without confirmation, use with caution)
--auto-delete                - Auto delete infected (without confirmation, use with caution)
--auto-quarantine            - Auto quarantine
--auto-whitelist             - Auto whitelist (if you sure that source isn't compromised)
--auto-skip                  - Auto skip

--auto-prompt=""             - Set auto prompt command 
                               ex. --auto-prompt="delete" or --auto-prompt="1" (alias of auto-delete)
     
Notes: 
For open files with nano or vim run the scripts with "-d disable_functions=''"

Examples: php -d disable_functions='' scanner ./mywebsite/http/ -l -s --only-exploits
          php -d disable_functions='' scanner -s --max-filesize="5MB"
          php -d disable_functions='' scanner -s -logs="/user/marco/scanner.log"
          php -d disable_functions='' scanner --agile --only-exploits
          php -d disable_functions='' scanner --exploits="double_var2" --functions="eval, str_replace"
          php -d disable_functions='' scanner --ignore-paths="/my/path/*.log,/my/path/*/cache/*"
EOD;
        self::displayLine($help . self::eol(2) . Scanner::getArgv()->usage(), 2);
    }
}
